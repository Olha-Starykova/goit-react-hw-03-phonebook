{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","type","title","required","id","onChange","Component","ContactList","contacts","onDeleteTodo","map","onClick","Filter","filter","App","addTodo","contact","includes","alert","prevState","deleteTodo","contactId","formSubmitHandler","data","console","log","changeFilter","currentTarget","getVisibleTodos","normalizedFilter","toLowerCase","localStorage","getItem","parsedContact","JSON","parse","prevProps","setItem","stringify","visibleTodos","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7527117c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n      // console.log(this.state)\r\n      //перекидываем данные в апп\r\n      this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n             // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n             // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n            \r\n                \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n           \r\n      );\r\n    }\r\n}\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\n\r\n//его стейт в арр\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm/ContactForm';\n\nimport ContactList from './components/ContactList/ContactList';\n\n\n\nimport Filter from './components/Filter/Filter';\n\n\nclass App extends Component {\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  };\n\n  addTodo = (name, number) => {\n    const existingName = this.state.contacts.map(contact => contact.name).includes(name);\n  \n    if (existingName) {\n      alert(`${name} is already in contacts`);\n    } else {\n      const contacts = {\n        id: shortid.generate(),\n        name: name,\n        number: number,\n      }\n      //обновляем состояние от предыдущего добавляем элемент, а стейте арр идет обновление\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contacts],\n      })\n      );\n    }\n  };\n   \n \n\n//убираем елемент , чей id совпадает\n   deleteTodo = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n  \n   \n  //получаем пропы с формы\n     formSubmitHandler = data => {\n      console.log(data)\n     }\n  \n   changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n   };\n  \n  getVisibleTodos = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\")\n    const parsedContact = JSON.parse(contacts)\n//console.log(parsedContact)\n    if (parsedContact) { this.setState({ contacts: parsedContact }) };\n   \n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    //console.log(prevState)\n   // console.log(this.state)\n    if (this.state.contacts !== prevState.contacts) {\n      console.log(\"обновилось поле пишем в локалсторадж\")\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    };\n  }\n  \n    render() {\n      const { filter } = this.state\n      const visibleTodos = this.getVisibleTodos();\n      \n      return (\n        <div>\n         <h1>Phonebook</h1>\n          <ContactForm onSubmit={this.addTodo} />\n          <h2>Contacts</h2>\n          <Filter filter={filter} onChange={ this.changeFilter}/>\n          <ContactList contacts={visibleTodos} onDeleteTodo={this.deleteTodo} />\n        </div>\n      );\n    }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}